version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: microservice_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - microservice_network
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: microservice_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservice_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # etcd 服务注册与发现
  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: microservice_etcd
    environment:
      ETCD_NAME: etcd0
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd:2380
      ETCD_INITIAL_CLUSTER: etcd0=http://etcd:2380
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-cluster-1
      ETCD_INITIAL_CLUSTER_STATE: new
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - etcd_data:/etcd-data
    networks:
      - microservice_network
    restart: unless-stopped

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: microservice_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservice_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: microservice_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservice_network
    restart: unless-stopped

  # Jaeger 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: microservice_jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      COLLECTOR_OTLP_ENABLED: true
    networks:
      - microservice_network
    restart: unless-stopped

  # API网关
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    container_name: microservice_api_gateway
    ports:
      - "8080:8080"
    environment:
      - CONFIG_PATH=/app/config/config.yaml
    volumes:
      - ./config:/app/config
    depends_on:
      - etcd
      - redis
    networks:
      - microservice_network
    restart: unless-stopped

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: ./services/user-service/Dockerfile
    container_name: microservice_user_service
    ports:
      - "8081:8081"
    environment:
      - CONFIG_PATH=/app/config/config.yaml
    volumes:
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
      - etcd
    networks:
      - microservice_network
    restart: unless-stopped

  # 订单服务
  order-service:
    build:
      context: .
      dockerfile: ./services/order-service/Dockerfile
    container_name: microservice_order_service
    ports:
      - "8082:8082"
    environment:
      - CONFIG_PATH=/app/config/config.yaml
    volumes:
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
      - etcd
    networks:
      - microservice_network
    restart: unless-stopped

  # 支付服务
  payment-service:
    build:
      context: .
      dockerfile: ./services/payment-service/Dockerfile
    container_name: microservice_payment_service
    ports:
      - "8083:8083"
    environment:
      - CONFIG_PATH=/app/config/config.yaml
    volumes:
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
      - etcd
    networks:
      - microservice_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  etcd_data:
  prometheus_data:
  grafana_data:

networks:
  microservice_network:
    driver: bridge